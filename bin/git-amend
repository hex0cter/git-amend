#!/usr/bin/env ruby
require 'timerizer'
require 'time'
require 'optparse'
require_relative '../lib/version'

# Default values
options = {
  path: Dir.pwd,
  author_email: nil,
  author_name: nil,
  committer_email: nil,
  committer_name: nil,
  should_shuffle_date: false,
  from: 365.days.ago,
  to: 0.days.ago,
  dry_run: false,
  verbose: false,
  version: false,
  commit_hash: nil
}

OptionParser.new do |opts|
  opts.banner = "Usage: git-amend [options]"

  opts.on("-p <path>", "--path=<path>", "Path to the target respository") do |path|
    options[:path] = path
  end
  opts.on("-a <email>", "--author=<email>", "Author email for all commits") do |author_email|
    options[:author_email] = author_email
    puts "Setting author email to #{author_email}..."
  end
  opts.on("-n <name>", "--author-name=<name>", "Author name for all commits") do |author_name|
    options[:author_name] = author_name
    puts "Setting author name to #{author_name}..."
  end
  opts.on("-c <email>", "--committer=<email>", "Committer email for all commits") do |committer_email|
    options[:committer_email] = committer_email
    puts "Setting committer email to #{committer_email}..."
  end
  opts.on("-m <name>", "--committer-name=<name>", "Committer name for all commits") do |committer_name|
    options[:committer_name] = committer_name
    puts "Setting committer name to #{committer_name}..."
  end
  opts.on("-C <hash>", "--commit-hash=<hash>", "The hash of git commit that needs to be updated") do |commit_hash|
    options[:commit_hash] = commit_hash
  end
  opts.on("-s", "--shuffle", "Whether to shuffle the commit date (default: no)") do |should_shuffle|
    options[:should_shuffle_date] = true
  end
  opts.on("-f <date>", "--from=<date>", "Date of the first commit") do |from|
    options[:from] = DateTime.strptime(from, '%Y-%m-%d').to_time # TODO: format data
  end
  opts.on("-t <date>", "--to=<date>", "Date of the latest commit") do |to|
    options[:to] = DateTime.strptime(to, '%Y-%m-%d').to_time # TODO: format data
  end
  opts.on("-v", "--verbose", "Verbose mode") do
    options[:verbose] = true
  end
  opts.on("-V", "--version", "Print version") do
    options[:version] = true
  end
  opts.on("-d", "--dry-run", "Dry run without executing the actual command.") do
    options[:dry_run] = true
  end
end.parse!

if options[:version] then
  puts "git-amend v#{GitAmend::VERSION}"
  exit 0
end

all_commits = %x(git log --format=format:%H)
all_commits = all_commits.split(' ')
no_of_all_commits = all_commits.size

development_days_for_repo = (options[:to] - options[:from])/(3600 * 24)
days_offset = (0..development_days_for_repo).to_a.sample(no_of_all_commits).sort.reverse
no_of_commits_to_update = days_offset.size

Dir.chdir options[:path]
days_offset.each_index do |index|
  commit_hash = all_commits[index]

  if options[:commit_hash] and commit_hash != options[:commit_hash] then
    puts "[#{index+1}/#{no_of_commits_to_update}] Skipping commit #{commit_hash} ..."
    next
  end

  extra_cmd = ''
  if options[:author_email]
    extra_cmd += "export GIT_AUTHOR_EMAIL='#{options[:author_email]}'; "
  end
  if options[:author_name]
    extra_cmd += "export GIT_AUTHOR_NAME='#{options[:author_name]}'; "
  end
  if options[:committer_email]
    extra_cmd += "export GIT_COMMITTER_EMAIL='#{options[:committer_email]}'; "
  end
  if options[:committer_name]
    extra_cmd += "export GIT_COMMITTER_NAME='#{options[:committer_name]}'; "
  end

  if options[:should_shuffle_date] then
    offset = days_offset[index]
    date = options[:from] + offset * (24 * 3600)
    new_time = Time.new(date.year, date.month, date.day, (18..23).to_a.sample, (0..59).to_a.sample, (0..59).to_a.sample, "+02:00").to_s

    extra_cmd += "export GIT_AUTHOR_DATE='#{new_time}'; "
    extra_cmd += "export GIT_COMMITTER_DATE='#{new_time}'; "
  end

  command = <<-FOO
  git filter-branch -f --env-filter "if test \\$GIT_COMMIT = '#{commit_hash}' ; then #{extra_cmd} fi && rm -fr '.git/refs/original/'"
FOO

  if options[:verbose] then
    puts command
  end

  puts "[#{index+1}/#{no_of_commits_to_update}] Updating commit #{commit_hash} ..."
  unless options[:dry_run] then
    system("FILTER_BRANCH_SQUELCH_WARNING=1 #{command}")
  end
end
