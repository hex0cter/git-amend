#!/usr/bin/env ruby

require 'timerizer'
require 'time'
require 'optparse'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: git-update [options]"

  opts.on("-p <path>", "--path=<path>", "Path to the target respository") do |path|
    options[:path] = path
  end
  opts.on("-a <email>", "--author=<email>", "Author email for all commits") do |author_email|
    options[:author_email] = author_email
    puts "Setting author email to #{author_email}..."
  end
  opts.on("-n <name>", "--author-name=<name>", "Author name for all commits") do |author_name|
    options[:author_name] = author_name
    puts "Setting author name to #{author_name}..."
  end
  opts.on("-c <email>", "--committer=<email>", "Committer email for all commits") do |committer_email|
    options[:committer_email] = committer_email
    puts "Setting committer email to #{committer_email}..."
  end
  opts.on("-m <name>", "--committer-name=<name>", "Committer name for all commits") do |committer_name|
    options[:committer_name] = committer_name
    puts "Setting committer name to #{committer_name}..."
  end
  opts.on("-s", "--shuffle", "Whether to shuffle the commit date (default: no)") do |should_shuffle|
    options[:should_shuffle_date] = true
  end
  opts.on("-i <interval>", "--interval=<interval>", "How frequent is repo updated in days (default: 7)") do |interval|
    options[:interval] = interval.to_i
  end
  opts.on("-f <date>", "--from=<date>", "Date of the first commit") do |from|
    options[:from] = from
  end
  opts.on("-t <date>", "--to=<date>", "Date of the latest commit") do |to|
    options[:to] = to
  end
end.parse!


options[:path] = Dir.pwd if options[:path] == nil
options[:interval] = 7 if options[:interval] == nil
options[:should_shuffle_date] = false if options[:should_shuffle_date] == nil

all_commits = %x(git log --format=format:%H)
all_commits = all_commits.split('\n')
num_of_commits = all_commits.length
if options[:should_shuffle_date] then
  puts 'yes'
end


all_commits.each do |commit|
  puts commit
end

return
Dir.chdir options[:path]
puts "Working directory: #{options[:path]}, #{options[:interval]} days per commit on average..."

no_of_all_commits = %x(git log --pretty=format:"%H" | wc -w)
no_of_all_commits = no_of_all_commits.to_i
development_days_for_repo = no_of_all_commits * options[:interval]
puts "Spreading #{no_of_all_commits} commits into #{development_days_for_repo} days."

days_offset = []
(1..development_days_for_repo).to_a.sample(no_of_all_commits).each do |num|
  days_offset << num
end

days_offset.sort!

index = 0

days_offset.each do |offset|
  index += 1

  commit_hash = %x(git log -#{index} --pretty=format:"%H" | tail -1)

  date = offset.days.ago
  new_time = Time.new(date.year, date.month, date.day, (18..23).to_a.sample, (0..59).to_a.sample, (0..59).to_a.sample, "+02:00").to_s
  puts "[#{index}/#{no_of_all_commits}] Set commit #{commit_hash} to #{offset} days ago: #{new_time}"

  extra_cmd = ''
  if options[:interval]
    extra_cmd += "export GIT_AUTHOR_DATE='#{new_time}'; "
    extra_cmd += "export GIT_COMMITTER_DATE='#{new_time}'; "
  end
  if options[:author_email]
    extra_cmd += "export GIT_AUTHOR_EMAIL='#{options[:author_email]}'; "
  end
  if options[:author_name]
    extra_cmd += "export GIT_AUTHOR_NAME='#{options[:author_name]}'; "
  end
  if options[:committer_email]
    extra_cmd += "export GIT_COMMITTER_EMAIL='#{options[:committer_email]}'; "
  end
  if options[:committer_name]
    extra_cmd += "export GIT_COMMITTER_NAME='#{options[:committer_name]}'; "
  end

  command = <<-FOO
  git filter-branch -f --env-filter "if test \\$GIT_COMMIT = '#{commit_hash}' ; then #{extra_cmd} fi && rm -fr '.git/refs/original/'"
FOO
  puts command
  system(command)
end
